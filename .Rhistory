install.packages('swirl')
packageVersion('swirl')
library(swirl)
install_from_swirl('Statistical Inference')
swirl()
33/36
deck
52
4/52
1 * 1/52 * 1/52 * 1/53
13/52
0
12/52
2/51
1.6 * 0.8 / 2
0.64
mypdf
integrate(mypdf, 0, 1.6)
3
2
info89
info()
solve?
)
?solve
sqrt(2)
0.997 * 0.001
(1 - 0.985) * (1 - 0.001)
(0.997 * 0.001) / ( (0.997 * 0.001) * ((1-0.985) * (1 - 0.001)))
(0.997 * 0.001) / ( (0.997 * 0.001) + ((1-0.985) * (1 - 0.001)))
1/6 + 2/6 + 3/6 + 4/6 + 5/6 + 6/6
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5 * (edh + edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
qunif?
)
?qunif
qunif(c(1, 1, 1, 1), 0, 1)
qunif(c(1, 1, 1, 1, 1, 1, 1), 0, 1)
qunif(c(1, 1, 1, 1, 1, 1, 1), 0, 0.75)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp[0]
temp[[0]
]
temp[1]
temp['X']
temp[['X']
Â¨]
temp[['X']]
temp['Prob']
temp
temp[1, :]
temp[1,]
temp[1,] * temp[2,]
mean(temp[1,] * temp[2,])
sum(temp[1,] * temp[2,])
0.75 * 0.30
0.225 / (0.225 + (0.48 * 0.70))
rbinom(3, prob=0.8, size=5)
pbinom(3, prob=0.8, size=5)
library(swirl)
swirl()
head(pValues)
sum(pValues > 0.05)
sum(pValues < 0.05)
sum(pValues < p.adjust(method='bonferroni'))
sum(pValues < p.adjust(pValues, method='bonferroni'))
sum(p.adjust(pValues, method='bonferroni') < 0.05)
sum(p.adjust(pValues, method='BH') < 0.05)
tail(trueStatus)
table(pValues2<0.05j, trueStatus)
table(pValues2<0.05, trueStatus)
24 / 1000 * 100
24 / 500
table(p.adjust(pValues2, method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2, method="BH") < 0.05, trueStatus)
sum(1:6 * 1/6)
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B, replace=TRUE)
resam <- matrix(B, nh)
resam <- matrix(sam, B, nh)
meds <- apply(sam, 1, median)
meds <- apply(resam, 1, median)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(0.025, 0.975))
quantile(meds, c(0.025, 0.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, grouping)
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count) - mean(Cdata$count)
sample(group)
perms <- sapply(1:10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1:10000, function(i) testStat(DEcounts, sample(group)))
baseline <- c(140,138,150,148,135)
week2 <- c(132, 135, 151, 146, 130)
week2 - baseline
t.test(week2 - baseline, paired = TRUE)
t.test(baseline, week2, paired = TRUE)
qt?
)
?qt
1100 + c(-1, 1) * qt(0.975, lower.tail=FALSE, df=8) * 30
pt(0.75, df=3)$p
pt(0.75, df=3)
pt(0.75, df=3, lower.tail = FALSE)
?t.test
pt(0.75, df=3, lower.tail = FALSE)
1100 + c(-1, 1) * qt(0.975, lower.tail=FALSE, df=8) * 30 / sqrt(9)
1100 + c(-1, 1) * qt(0.975, df=8) * 30 / sqrt(9)
binom.test(x=3, n=4, alt="greater")
setwd("~/GitHub/statistical-inference-course-project")
